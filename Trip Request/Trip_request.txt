:comment Trip Request

:index int

:comment ----- TYPES DESCLARATIONS -------
:smt (define-type UserID)
:smt (define-type Status)
:smt (define-type Order)


:comment ---------- FUNCTIONS and PREDICATES -----------
:smt (define userstat ::(-> UserID Status))

:smt (define permanent :: Status)
:smt (define intern :: Status)
:smt (define TwoThree :: Order)
:smt (define ThreeTwo :: Order)

:db_driven 
:db_sorts UserID Status Order
:db_functions userstat
:db_constants permanent intern TwoThree ThreeTwo


:global sat bool
:global flag Order
:global p0 bool
:global p1 bool
:global p2 bool
:global p3 bool
:global p4 bool
:global p5 bool
:global p6 bool


:global dt1 bool
:global dt2 bool
:global dt3 bool
:global dt4 bool


:local user UserID
:local workload int
:local ht1 bool
:local ht2 bool
:local ht3 bool
:local ht4 bool



:initial
:var x
:cnj (= sat false)(= p0 true)(= p1 false)(= p2 false)(= p3 false)(= p4 false)(= p5 false)(= p6 false)(= dt1 false)(= dt2 false)(= dt3 false)(= dt4 false)(= ht1[x] false)(= ht2[x] false)(= ht3[x] false)(= ht4[x] false)(= workload[x] 0)

:comment (= user[x] NULL_UserID)


:max_unsafe_number 20
:u_cnj (sat true)(= p0 false)(= p1 false)(= p2 false)(= p3 false)(= p4 false)(= p5 false)(= p6 true)(= dt1 true)(= dt2 true)(= dt3 true)(= dt4 true)

:eevar d UserID
:eevar e Status


:comment T1, Task 1, intern
:transition
:var x
:var j
:guard (= p0 true)(= p1 true)(= p2 false)(= p3 false)(= p4 false)(= p5 false)(= p6 false)(= ht1[x] false)(= user[x] d)((userstat d) intern)(<= workload[x] 70)(>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val false
:val false
:val true
:val true
:val p4
:val p5
:val p6

:val true
:val dt2
:val dt3
:val dt4

:val user[j]
:val (+ workload[j] 30)
:val true
:val ht2[j]
:val ht3[j]
:val ht4[j]

:case (not(= x j))
:val sat
:val flag 
:val false
:val false
:val true
:val true
:val p4
:val p5
:val p6

:val true
:val dt2
:val dt3
:val dt4

:val user[j]
:val workload[j]
:val false
:val ht2[j]
:val ht3[j]
:val ht4[j]

:comment T2, Task 1, permanent
:transition
:var x
:var j
:guard (= p0 false)(= p1 true)(= p2 false)(= p3 false)(= p4 false)(= p5 false)(= p6 false)(= ht1[x] false)(= user[x] d)((userstat d) permanent)(<= workload[x] 80)(>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val false
:val true
:val true
:val p4
:val p5
:val p6

:val true
:val dt2
:val dt3
:val dt4

:val user[j]
:val (+ workload[j] 20)
:val true
:val ht2[j]
:val ht3[j]
:val ht4[j]

:case (not(= x j))
:val sat
:val flag 
:val p0
:val false
:val true
:val true
:val p4
:val p5
:val p6

:val true
:val dt2
:val dt3
:val dt4

:val user[j]
:val workload[j]
:val false
:val ht2[j]
:val ht3[j]
:val ht4[j]



:comment T3, Task 2, intern, 2-3
:transition
:var x
:var j
:guard (= flag TwoThree)(= p0 false)(= p1 false)(= p2 true)(= p3 true)(= p4 false)(= p5 false)(= p6 false)(= ht2[x] false)(= ht1[x] false)(= user[x] d)(= (userstat d) intern)(<= workload[x] 70)(>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val p1
:val false
:val p3
:val true
:val p5
:val p6

:val dt1
:val true
:val dt3
:val dt4

:val user[j]
:val (+ workload[j] 30)
:val ht1[j]
:val true
:val ht3[j]
:val ht4[j]


:case (not(= x j))
:val sat
:val flag 
:val p0
:val p1
:val false
:val p3
:val true
:val p5
:val p6

:val dt1
:val true
:val dt3
:val dt4

:val user[j]
:val workload[j]
:val ht1[j]
:val false
:val ht3[j]
:val ht4[j]


:comment T4, Task 2, intern, 3-2
:transition
:var x
:var j
:guard (= flag ThreeTwo)(= p0 false)(= p1 false)(= p2 true)(= p3 false)(= p4 false)(= p5 true)(= p6 false)(= ht2[x] false)(= ht1[x] false)(= user[x] d)(= (userstat d) intern)(<= workload[x] 70)(>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val p1
:val false
:val p3
:val true
:val p5
:val p6

:val dt1
:val true
:val dt3
:val dt4

:val user[j]
:val (+ workload[j] 30)
:val ht1[j]
:val true
:val ht3[j]
:val ht4[j]


:case (not(= x j))
:val sat
:val flag 
:val p0
:val p1
:val false
:val p3
:val true
:val p5
:val p6

:val dt1
:val true
:val dt3
:val dt4

:val user[j]
:val workload[j]
:val ht1[j]
:val false
:val ht3[j]
:val ht4[j]


:comment T5, Task 3, Intern, 2-3
:transition
:var x
:var j
:guard (= flag TwoThree)(= p0 false)(= p1 false)(= p2 false)(= p3 true)(= p4 true)(= p5 false)(= p6 false)(= ht3[x] false)(= user[x] d)(= (userstat d) permanent)(<= workload[x] 40) (>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val p1
:val p2
:val false
:val p4
:val true
:val p6

:val dt1
:val dt2
:val true
:val dt4

:val user[j]
:val (+ workload[j] 60)
:val ht1[j]
:val ht2[j]
:val true
:val ht4[j]

:case (not(= x j))
:val sat
:val flag 
:val p0
:val p1
:val p2
:val false
:val p4
:val true
:val p6

:val dt1
:val dt2
:val true
:val dt4

:val user[j]
:val workload[j]
:val ht1[j]
:val ht2[j]
:val false
:val ht4[j]

:comment T6, Task 3, Intern, 3-2
:transition
:var x
:var j
:guard (= flag ThreeTwo)(= p0 false)(= p1 false)(= p2 true)(= p3 true)(= p4 false)(= p5 false)(= p6 false)(= ht3[x] false)(= user[x] d)(= (userstat d) permanent)(<= workload[x] 40) (>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val p1
:val p2
:val false
:val p4
:val true
:val p6

:val dt1
:val dt2
:val true
:val dt4

:val user[j]
:val (+ workload[j] 60)
:val ht1[j]
:val ht2[j]
:val true
:val ht4[j]

:case (not(= x j))
:val sat
:val flag 
:val p0
:val p1
:val p2
:val false
:val p4
:val true
:val p6

:val dt1
:val dt2
:val true
:val dt4

:val user[j]
:val workload[j]
:val ht1[j]
:val ht2[j]
:val false
:val ht4[j]


:comment T7, Task 4, permanent
:transition
:var x
:var j
:guard (= p0 false)(= p1 false)(= p2 false)(= p3 false)(= p4 true)(= p5 true)(= p6 false)(= ht4[x] false)(= ht3[x] true)(= user[x] d)(= (userstat d) permanent)(<= workload[x] 70) (>= workload[x] 0)
:numcases 2
:case (= x j)
:val sat
:val flag 
:val p0
:val p1
:val p2
:val p3
:val false
:val false
:val true

:val dt1
:val dt2
:val dt3
:val true

:val user[j]
:val (+ workload[j] 30)
:val ht1[j]
:val ht2[j]
:val ht3[j]
:val true

:case (not(= x j))
:val sat
:val flag 
:val p0
:val p1
:val p2
:val p3
:val false
:val false
:val true

:val dt1
:val dt2
:val dt3
:val true

:val user[j]
:val workload[j]
:val ht1[j]
:val ht2[j]
:val ht3[j]
:val false